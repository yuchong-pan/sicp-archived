(define (estimate-pi trials)
  (estimate-integral (lambda (x y)
                       (<= (+ (* x x) (* y y)) 1))
                     -1 1 -1 1 trials))
(define (estimate-integral P x1 x2 y1 y2 trials)
  (let ((area (* (abs (- x1 x2))
                 (abs (- y1 y2))))
        (prob (monte-carlo trials
                           (lambda ()
                             (P (random-in-range x1 x2)
                                (random-in-range y1 y2))))))
    (* area prob)))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining passed-trials)
    (cond ((= trials-remaining 0) (/ passed-trials trials))
          ((experiment) (iter (- trials-remaining 1) (+ passed-trials 1)))
          (else (iter (- trials-remaining 1) passed-trials))))
  (iter trials 0))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random (exact->inexact range)))))
