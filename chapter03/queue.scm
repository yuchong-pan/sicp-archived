(define (make-queue) (cons '() '()))
(define (front-ptr q) (car q))
(define (rear-ptr q) (cdr q))
(define (set-front-ptr! q i) (set-car! q i))
(define (set-rear-ptr! q i) (set-cdr! q i))
(define (empty-queue? q) (null? (front-ptr q)))
(define (front-queue q)
  (if (empty-queue? q)
      (error "FRONT called with an empty queue" q)
      (car (front-ptr q))))
(define (insert-queue! q i)
  (let ((new-pair (cons i '())))
    (if (empty-queue? q)
        (begin (set-front-ptr! q new-pair)
               (set-rear-ptr! q new-pair)
               q)
        (begin (set-cdr! (rear-ptr q) new-pair)
               (set-rear-ptr! q new-pair)
               q))))
(define (delete-queue! q)
  (if (empty-queue? q)
      (error "DELETE! called with an empty queue" q)
      (begin (set-front-ptr! q (cdr (front-ptr q)))
             q)))
