(define (make-deque) (cons '() '()))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (content-ptr (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (content-ptr (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-item (list '() item '())))
    (if (empty-deque? deque)
	(begin (set-front-ptr! deque new-item)
	       (set-rear-ptr! deque new-item)
	       deque)
	(begin (set-next-ptr! new-item (front-ptr deque))
	       (set-prev-ptr! (front-ptr deque) new-item)
	       (set-front-ptr! deque new-item)
	       deque))))
(define (rear-insert-deque! deque item)
  (let ((new-item (list '() item '())))
    (if (empty-deque? deque)
	(begin (set-front-ptr! deque new-item)
	       (set-rear-ptr! deque new-item)
	       deque)
	(begin (set-prev-ptr! new-item (rear-ptr deque))
	       (set-next-ptr! (rear-ptr deque) new-item)
	       (set-rear-ptr! deque new-item)
	       deque))))
(define (front-delete-deque! deque)
  (if (empty-deque? deque)
      (error "FRONT-DELETE! called with an empty deque" deque)
      (begin (set-prev-ptr! (next-ptr (front-ptr deque)) '())
	     (set-front-ptr! deque (next-ptr (front-ptr deque)))
	     deque)))
(define (rear-delete-deque! deque)
  (if (empty-deque? deque)
      (error "REAR-DELETE! called with an empty deque" deque)
      (begin (set-next-ptr! (prev-ptr (rear-ptr deque)) '())
	     (set-rear-ptr! deque (prev-ptr (rear-ptr deque)))
	     deque)))
(define (print-deque deque)
  (define (loop cur-ptr)
    (if (null? cur-ptr)
	'()
	(cons (content-ptr cur-ptr)
	      (loop (next-ptr cur-ptr)))))
  (if (empty-deque? deque)
      (display '())
      (loop (front-ptr deque))))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (content-ptr ptr) (cadr ptr))
(define (prev-ptr ptr) (car ptr))
(define (next-ptr ptr) (caddr ptr))
(define (set-content-ptr! ptr item) (set-car! (cdr ptr) item))
(define (set-prev-ptr! ptr item) (set-car! ptr item))
(define (set-next-ptr! ptr item) (set-car! (cddr ptr) item))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
