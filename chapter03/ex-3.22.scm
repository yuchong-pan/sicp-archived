(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (this-queue) (cons front-ptr rear-ptr))
    (define (front-queue)
      (if (empty-queue?)
	  (error "FRONT called with an empty queue" (this-queue))
	  (car front-ptr)))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(if (empty-queue?)
	    (begin (set-front-ptr! new-pair)
		   (set-rear-ptr! new-pair)
		   (this-queue))
	    (begin (set-cdr! rear-ptr new-pair)
		   (set-rear-ptr! new-pair)
		   (this-queue)))))
    (define (delete-queue!)
      (if (empty-queue?)
	  (error "DELETE! called with an empty queue" (this-queue))
	  (begin (set-front-ptr! (cdr front-ptr))
		 (this-queue))))
    (define (print-queue)
      (define (loop cur-ptr)
	(if (eq? cur-ptr rear-ptr)
	    (cons (car cur-ptr) '())
	    (cons (car cur-ptr) (loop (cdr cur-ptr)))))
      (if (empty-queue?)
	  (display '())
	  (loop front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
	    ((eq? m 'front-queue) front-queue)
	    ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) delete-queue!)
	    ((eq? m 'print-queue) print-queue)
	    (else (error "Undefined operation -- QUEUE" m))))
    dispatch))
(define (empty-queue? q) ((q 'empty-queue?)))
(define (front-queue q) ((q 'front-queue)))
(define (insert-queue! q item) ((q 'insert-queue!) item))
(define (delete-queue! q) ((q 'delete-queue!)))
(define (print-queue q) ((q 'print-queue)))
