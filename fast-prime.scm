(define (fast-prime? n times)
  (define (square x)
    (* x x))
  (define (even? x)
    (= (remainder x 2) 0))
  (define (expmod a n m)
    (cond ((= n 0) 1)
          ((even? n) (remainder (square (expmod a (/ n 2) m)) m))
          (else (remainder (* a (expmod a (- n 1) m)) m))))
  (define (try-it? a n)
    (= (expmod a n n) a))
  (define (fermat-test? n)
    (try-it? (+ (random (- n 1)) 1) n))
  (cond ((= times 0) #t)
        ((fermat-test? n) (fast-prime? n (- times 1)))
        (else #f)))
