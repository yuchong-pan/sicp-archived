(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (prime? n)
  (= (smallest-divisor n 2) n))
(define (smallest-divisor n k)
  (define (next k)
    (if (= k 2) 3 (+ k 2)))
  (cond ((> (square k) n) n)
        ((divides? k n) k)
        (else (smallest-divisor n (next k)))))
(define (square x)
  (* x x))
(define (divides? a b)
  (= (remainder b a) 0))

;; The observed ratio of the speeds of the two algorithms is about 3/2.
;; The main reason for this fact is that calls for the next procedure themselves requires constant time.
