(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 10)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (fermat-test? n)
  (define (try-it? a n)
    (= (expmod a n n) a))
  (try-it? (+ (random (- n 1)) 1) n))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test? n) (fast-prime? n (- times 1)))
        (else #f)))
(define (expmod a n m)
  (cond ((= n 0) 1)
        ((even? n) (remainder (square (expmod a (/ n 2) m)) m))
        (else (remainder (* a (expmod a (- n 1) m)) m))))
(define (square x)
  (* x x))
(define (even? x)
  (= (remainder x 2) 0))

;; I expect that the time needed to test primes near 1,000,000 is about 2 times needed to test primes near 1000, since the logarithm of
;; 1,000,000 to the base 2 is 2 times the logarithm of 1000 to the base 2, and the data shows this fact.
