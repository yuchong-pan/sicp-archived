(define (prime? n)
  (prime-iter? n 10))
(define (prime-iter? n times)
  (cond ((= times 0) #t)
        ((miller-rabin-test? n) (prime-iter? n (- times 1)))
        (else #f)))
(define (miller-rabin-test? n)
  (define (try-it? a n)
    (= (expmod a n n) a))
  (try-it? (+ (random (- n 1)) 1) n))
(define (expmod a n m)
  (cond ((= n 0) 1)
        ((even? n) (check-trivial (expmod a (/ n 2) m) m))
        (else (remainder (* a (expmod a (- n 1) m)) m))))
(define (check-trivial prev n)
  (define (nontrivial? prev n)
    (and (= (remainder (square prev) n) 1)
         (not (or (= prev 1)
                  (= prev (- n 1))))))
  (if (nontrivial? prev n)
      0
      (remainder (square prev) n)))
(define (square x)
  (* x x))
(define (even? x)
  (= (remainder x 2) 0))
