(define X 10.)
(define Y 2.)
(define max-steps 1000)
(define tolerance .000000001)
(define (converge? f x)
  (define (iter x steps)
    (cond ((> steps max-steps) #f)
          ((good-enough? x (f x)) #t)
          (else (iter (f x) (+ steps 1)))))
  (iter x 1))
(define (good-enough? a b)
  (< (abs-error a b) tolerance))
(define (abs-error a b)
  (abs (- a b)))
(define (num-of-average-damps n)
  (define (iter num f)
    (if (converge? f Y)
        num
        (iter (+ num 1) (average-damp f))))
  (iter 0 (gen-func n X)))
(define (gen-func n x)
  (define (iter k)
    (if (= k n)
        (lambda (y)
          x)
        (lambda (y)
          (/ ((iter (+ k 1)) y) y))))
  (iter 1))
(define (average-damp f)
  (lambda (x)
    (average x (f x))))
(define (average a b)
  (/ (+ a b) 2))
(define (all-nums-of-average-damps n)
  (define (iter k)
    (cond ((= k n) (display k)
                   (display " *** ")
                   (display (num-of-average-damps k))
                   (newline))
          (else (display k)
                (display " *** ")
                (display (num-of-average-damps k))
                (newline)
                (iter (+ k 1)))))
  (iter 2))
(define (display-n-elements f x n)
  (define (iter k x)
    (cond ((= k n) (display x)
                   (newline))
          (else (display x)
                (newline)
                (iter (+ k 1) (f x)))))
  (iter 1 x))
(define (nth-root x n)
  (fixed-point ((repeated average-damp
                          (calc-repeated-times n))
                (gen-func n x))
               Y))
(define (calc-repeated-times n)
  (define (iter product exp)
    (if (> product n)
        (- exp 1)
        (iter (* product 2) (+ exp 1))))
  (iter 1 0))
(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))
(define (compose f g)
  (lambda (x)
    (f (g (x)))))
(define (fixed-point f x)
  (let ((next (f x)))
    (if (good-enough? x next)
        next
        (fixed-point f next))))
