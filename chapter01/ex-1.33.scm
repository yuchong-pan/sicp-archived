(define (filtered-accumulate combiner null-value term a next b filter?)
  (if (> a b)
      null-value
      (combiner (if (filter? a)
                    (term a)
                    null-value)
                (filtered-accumulate combiner null-value term (next a) next b filter?))))
(define (sum-of-squares-of-primes a b)
  (filtered-accumulate + 0 square a inc b prime?))
(define (square x)
  (* x x))
(define (inc x)
  (+ x 1))
(define (prime? n)
  (define (smallest-divisor n k)
    (cond ((> (square k) n) n)
          ((divides? k n) k)
          (else (smallest-divisor n (+ k 1)))))
  (= (smallest-divisor n 2) n))
(define (divides? a b)
  (= (remainder b a) 0))
(define (product-of-integers-coprime-to-n n)
  (define (coprime-to-n? x)
    (coprime? x n))
  (filtered-accumulate * 1 identity 1 inc (- n 1) coprime-to-n?))
(define (coprime? a b)
  (= (gcd a b) 1))
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
