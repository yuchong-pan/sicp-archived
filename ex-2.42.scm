(define (adjoin r c positions)
  (cons (make-position r c) positions))
(define (make-position r c)
  (cons r c))
(define (row position)
  (car position))
(define (column position)
  (cdr position))

(define empty-board nil)

(define (safe? col positions)
  (define (check-safe? now-col rest-positions)
    (accumulate (lambda (x y) (and x y))
                #t
                (map (lambda (now-position)
                       (check-single-safe? now-position rest-positions))
                     now-col)))
  (define (check-single-safe? now-position rest-positions)
    (accumulate (lambda (x y) (and x y))
                #t
                (map (lambda (rest-position)
                       (not (fight? now-position rest-position)))
                     rest-positions)))
  (check-safe? (filter (lambda (position)
                         (column-k? col position))
                       positions)
               (filter (lambda (position)
                         (not (column-k? col position)))
                       positions)))

(define (column-k? col position)
  (= col (column position)))
(define (fight? p1 p2)
  (or (= (row p1) (row p2))
      (= (column p1) (column p2))
      (= (- (row p1) (row p2))
         (- (column p1) (column p2)))
      (= (- (row p1) (row p2))
         (- (column p2) (column p1)))))
