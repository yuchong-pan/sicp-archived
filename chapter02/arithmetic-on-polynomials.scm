(define (install-polynomial-package)
  (define (make-poly var terms) (cons var terms))
  (define (variable poly) (car poly))
  (define (term-list poly) (cdr poly))
  (define (same-variable e1 e2)
    (and (variable? e1)
         (variable? e2)
         (eq? e1 e2)))
  (define (variable? e) (symbol? e))
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
        term-list
        (cons term term-list)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- ADD-POLY" (list p1 p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- MUL-POLY" (list p1 p2))))
  (define (tag x) (attach-tag 'polynomial x))
  (put 'add '(polynomial polynomial) (lambda (x y) (tag (add-poly x y))))
  (put 'mul '(polynomial polynomial) (lambda (x y) (tag (mul-poly x y))))
  (put 'make 'polynomial (lambda (x y) (tag (make-poly x y))))
  'done)
(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))
