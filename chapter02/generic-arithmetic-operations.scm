(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number) (lambda (x y)
                                             (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number) (lambda (x y)
                                             (tag (- x y))))
  (put 'mul '(scheme-number scheme-number) (lambda (x y)
                                             (tag (* x y))))
  (put 'div '(scheme-number scheme-number) (lambda (x y)
                                             (tag (/ x y))))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  'done)
(define (make-scheme-number)
  ((get 'make 'scheme-number) x))

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make x y) (cons x y))
  (define (add x y) (make (+ (* (numer x) (demon y))
                             (* (denom x) (numer y)))
                          (* (denom x) (denom y))))
  (define (sub x y) (make (- (* (numer x) (denom y))
                             (* (denom x) (numer y)))
                          (* (denom x) (denom y))))
  (define (mul x y) (make (* (numer x) (numer y))
                          (* (denom x) (denom y))))
  (define (div x y) (make (* (numer x) (denom y))
                          (* (denom x) (number y))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y)
                                   (tag (add x y))))
  (put 'sub '(rational rational) (lambda (x y)
                                   (tag (sub x y))))
  (put 'mul '(rational rational) (lambda (x y)
                                   (tag (mul x y))))
  (put 'div '(rational rational) (lambda (x y)
                                   (tag (div x y))))
  (put 'make 'rational (lambda (x y)
                         (tag (make x y)))))
(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (install-rectangular-package)
  (define (make-from-real-imag x y)
    (cons x y))
  (define (real-part x)
    (car x))
  (define (imag-part x)
    (cdr x))
  (define (magnitude x)
    (sqrt (+ (square (real-part x))
             (square (imag-part x)))))
  (define (angle x)
    (atan (imag-part x)
          (real-part x)))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular (lambda (x y)
                                           (attach-tag 'rectangular
                                                       (make-from-real-imag x y))))
  'done)

(define (install-polar-package)
  (define (make-from-mag-ang r a)
    (cons r a))
  (define (magnitude x)
    (car x))
  (define (angle x)
    (cdr x))
  (define (real-part x)
    (* (magnitude x)
       (cos (angle x))))
  (define (imag-part x)
    (* (magnitude x)
       (sin (angle x))))
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'make-from-mag-ang 'polar (lambda (x y)
                                   (attach-tag 'polar
                                               (make-from-mag-ang x y))))
  'done)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error "No method for these types -- APPLY-GENERIC" (list op type-tags))))))

(define (real-part x) (apply-generic 'real-part x))
(define (imag-part x) (apply-generic 'imag-part x))
(define (magnitude x) (apply-generic 'magnitude x))
(define (angle x) (apply-generic 'angle x))

(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add x y)
    (make-from-real-imag (+ (real-part x) (real-part y))
                         (+ (imag-part x) (imag-part y))))
  (define (sub x y)
    (make-from-real-imag (- (real-part x) (real-part y))
                         (- (imag-part x) (imag-part y))))
  (define (mul x y)
    (make-from-mag-ang (* (magnitude x) (magnitude y))
                       (+ (angle x) (angle y))))
  (define (div x y)
    (make-from-mag-ang (/ (magnitude x) (magnitude y))
                       (- (angle x) (angle y))))
  (define (tag x) (attach-tag 'complex x))
  (put 'add '(complex complex) (lambda (x y)
                                 (tag (add x y))))
  (put 'sub '(complex complex) (lambda (x y)
                                 (tag (sub x y))))
  (put 'mul '(complex complex) (lambda (x y)
                                 (tag (mul x y))))
  (put 'div '(complex complex) (lambda (x y)
                                 (tag (div x y))))
  (put 'make-from-real-imag 'complex (lambda (x y)
                                       (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex (lambda (x y)
                                     (tag (make-from-mag-ang x y))))
  'done)
(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-from-mag-ang x y)
  ((get 'make-from-mag-ang 'complex) x y))

(define (attach-tag type-tag contents) (cons type-tag contents))
(define (type-tag x) (car x))
(define (contents x) (cdr x))

(define (square x))
