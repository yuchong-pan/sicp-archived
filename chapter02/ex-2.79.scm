(define (install-equ?-package)
  (define (equ?-ordinary-rational x y)
    (= x (/ (numer x) (denom y))))
  (define (equ?-ordinary-complex x y)
    (and (= x (real-part y))
         (= 0 (imag-part y))))
  (define (equ?-rational-complex x y)
    (and (= (/ (numer x) (numer y))
            (real-part y))
         (= 0 (imag-part y))))
  (define (equ?-rational-rational x y)
    (let ((gx (gcd (numer x) (denom x)))
          (gy (gcd (numer y) (denom y))))
      (let ((nx (quotient (numer x) gx))
            (dx (quotient (denom x) gx))
            (ny (quotient (numer y) gy))
            (dy (quotient (denom y) gy)))
        (and (= nx ny) (= dx dy)))))
  (define (equ?-complex-complex x y)
    (and (= (real-part x)
            (real-part y))
         (= (imag-part x)
            (imag-part y))))
  (put 'equ? '(scheme-number rational) equ?-ordinary-rational)
  (put 'equ? '(rational scheme-number) (lambda (x y) (equ?-ordinary-rational y x)))
  (put 'equ? '(scheme-number complex) equ?-ordinary-complex)
  (put 'equ? '(complex scheme-number) (lambda (x y) (equ?-ordinary-complex y x)))
  (put 'equ? '(rational complex) equ?-rational-complex)
  (put 'equ? '(complex rational) (lambda (x y) (equ?-rational-complex y x)))
  (put 'equ? '(scheme-number scheme-number) =)
  (put 'equ? '(rational rational) equ?-rational-rational)
  (put 'equ? '(complex complex) equ?-complex-complex)
  'done)
(define (equ? x y)
  (apply-generic 'equ x y))
