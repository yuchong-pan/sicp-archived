(define (adjoin-term term term-list)
  (if (= (length term-list)
         (order term))
      (cons (coeff term) term-list)
      (adjoin-term term
                   (cons 0 term-list))))
(define (the-empty-termlist) '())
(define (first-term term-list)
  (if (=zero? (car term-list))
      (first-term (cdr term-list))
      (make-term (- (length term-list) 1)
                 (car term-list))))
(define (rest-terms term-list)
  (cdr (memq (coeff (first-term term-list))
             term-list)))
(define (empty-termlist? term-list)
  (cond ((null? term-list) #t)
        ((=zero? (coeff (first-term term-list))) (empty-termlist? (rest-terms)))
        (else #f)))
(define (make-term order coeff) (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))
