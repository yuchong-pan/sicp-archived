(define (permutations s)
  (if (null? s)
      (list nil)
      (flatmap (lambda (x)
                 (map (lambda (y)
                        (cons x y))
                      (permutations (remove x s))))
               s)))
(define (flatmap proc seq)
  (accumulate append
              nil
              (map proc seq)))
(define (accumulate op initial seq)
  (if (null? seq)
      initial
      (op (car seq)
          (accumulate op initial (cdr seq)))))
(define (remove item seq)
  (filter (lambda (x)
            (not (= x item)))
          seq))
(define (filter predicate seq)
  (cond ((null? seq) nil)
        ((predicate (car seq)) (cons (car seq)
                                     (filter predicate (cdr seq))))
        (else (filter predicate (cdr seq)))))
