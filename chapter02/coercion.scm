(put-coercion 'scheme-number 'complex (lambda (x)
                                        (make-from-real-imag (contents x) 0)))
(define (apply-genetic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (type-tag (car args)))
                    (type2 (type-tag (cdr args)))
                    (a1 (car args))
                    (a2 (cdr args)))
                (let ((t1->t2 (get-coercion type1 type2))
                      (t2->t1 (get-coercion type2 type1)))
                  (cond (t1->t2 (apply-generic op (t1->t2 a1) a2))
                        (t2->t1 (apply-generic op a1 (t2->t1 a2)))
                        (else (error "No method for these types" (list op type-tags))))))
              (error "No method for these types" (list op type-tags)))))))
