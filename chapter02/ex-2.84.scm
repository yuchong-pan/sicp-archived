(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((a1 (car args))
                    (a2 (cadr args)))
                (let ((type1 (type-tag a1))
                      (type2 (type-tag a2)))
                  (if (higher? type1 type2)
                      (apply-generic op a1 (raise a2))
                      (apply-generic op (raise a1) a2))))
              (error "No method for these types" (list op type-tags)))))))
(define (higher? type1 type2)
  (< (to-top type1) (to-top type2)))
(define (to-top type)
  (if (eq? type 'complex)
      0
      (+ (to-top (raise type)) 1)))
