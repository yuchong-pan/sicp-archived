(define (install-rational-package)
  (define (make-rat x y) (cons x y))
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (add x y) (make-rat (add (mul (numer x) (denom y))
                                   (mul (denom x) (numer y)))
                              (mul (denom x) (denom y))))
  (define (sub x y) (make-rat (sub (mul (numer x) (denom y))
                                   (mul (denom x) (numer y)))
                              (mul (denom x) (denom y))))
  (define (mul x y) (make-rat (mul (numer x) (numer y))
                              (mul (denom x) (denom y))))
  (define (div x y) (make-rat (mul (numer x) (denom y))
                              (mul (denom x) (numer y))))
  (define (tag x) (attach-tag 'rational x))
  (put 'make 'rational (lambda (x y) (tag (make-rat x y))))
  (put 'numer '(rational) numer)
  (put 'denom '(rational) denom)
  (put 'add '(rational rational) (lambda (x y) (tag (add x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div x y))))
  'done)
(define (make-rational x y)
  ((get 'make 'rational) x y))
(define (numer x)
  (apply-generic 'numer x))
(define (denom x)
  (apply-generic 'denom x))
