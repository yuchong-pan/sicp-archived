(define (install-term-package)
  (put 'make 'term (lambda (x y)
                     (attach-tag 'term
                                 (cons x y))))
  (put 'order '(term) car)
  (put 'coeff '(term) cdr)
  'done)
(define (make-term x y)
  ((get 'make 'term) x y))
(define (order x)
  (apply-generic 'order x))
(define (coeff x)
  (apply-generic 'coeff x))

(define (install-sparse-package)
  (define (tag x) (attach-tag 'sparse x))
  (put 'adjoin-term '(term sparse) (lambda (term term-list)
                                     (tag (if (=zero? (coeff term))
                                              term-list
                                              (cons term term-list)))))
  (put 'the-empty-termlist 'sparse (tag '()))
  (put 'first-term '(sparse) car)
  (put 'rest-terms '(sparse) cdr)
  (put 'empty-termlist? '(sparse) (lambda (x) (null? x)))
  'done)

(define (install-dense-package)
  (define (adjoin-term term term-list)
    (if (= (order term)
           (length term-list))
        (cons (coeff term) term-list)
        (adjoin-term term
                     (cons 0 term-list))))
  (define (first-term term-list)
    (if (=zero? (car term-list))
        (first-term (cdr term-list))
        (make-term (- (lenghth term-list) 1)
                   (car term-list))))
  (define (empty-termlist? term-list)
    (cond ((null? term-list) #t)
          ((=zero? (car term-list)) (empty-termlist? (cdr term-list)))
          (else #f)))
  (define (tag x) (attach-tag 'dense x))
  (put 'adjoin-term '(term dense) (lambda (x y)
                                    (tag (adjoin-term x y))))
  (put 'the-empty-termlist 'dense (tag '()))
  (put 'first-term '(dense) first-term)
  (put 'rest-terms '(dense) (lambda (term-list)
                              (tag (cdr (memq (first-term term-list)
                                              term-list)))))
  (put 'empty-termlist? '(dense) empty-termlist?)
  'done)

(define (adjoin-term x y)
  (apply-generic 'adjoin-term x y))
(define (first-term x)
  (apply-generic 'first-term x))
(define (rest-terms x)
  (apply-generic 'rest-terms x))
(define (empty-termlist? x)
  (apply-generic 'empty-termlist? x))

(define (install-polynomial-package)
  ;; add-poly, mul-poly, add-terms, mul-terms, ...
  (put 'make 'polynomial (lambda (var terms)
                           (attach-tag 'polynomial
                                       (cons var terms))))
  (put 'variable '(polynomial) car)
  (put 'term-list '(polynomial) cdr)
  ;; interface add-poly, mul-poly, etc to rest of the system
  'done)
(define (make-polynomial x y)
  ((get 'make 'polynomial) x y))
(define (variable x)
  (apply-generic 'variable x))
(define (term-list x)
  (apply-generic 'term-list x))
