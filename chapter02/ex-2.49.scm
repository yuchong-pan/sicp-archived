#lang racket
(require (planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))

(define (unit-square vect)
  (make-vect (/ (vector-xcor vect)
                129)
             (/ (vector-ycor vect)
                129)))

(define (unit-square-hi-res vect)
  (make-vect (/ (vector-xcor vect)
                257)
             (/ (vector-ycor vect)
                257)))

(define outline-painter
  (lambda (frame)
    (let ((origin (unit-square (frame-origin frame)))
          (edge1 (unit-square (frame-edge1 frame)))
          (edge2 (unit-square (frame-edge2 frame))))
      (let ((vertex1 origin)
            (vertex2 (vector-add origin edge1))
            (vertex3 (vector-add origin edge2))
            (vertex4 (vector-add origin
                                 (vector-add edge1 edge2))))
        (let ((segment1 (make-segment vertex1 vertex2))
              (segment2 (make-segment vertex1 vertex3))
              (segment3 (make-segment vertex2 vertex4))
              (segment4 (make-segment vertex3 vertex4)))
          ((segments->painter (list segment1 segment2 segment3 segment4))
           frame))))))

(define X-painter
  (lambda (frame)
    (let ((origin (unit-square (frame-origin frame)))
          (edge1 (unit-square (frame-edge1 frame)))
          (edge2 (unit-square (frame-edge2 frame))))
      (let ((vertex1 origin)
            (vertex2 (vector-add origin edge1))
            (vertex3 (vector-add origin edge2))
            (vertex4 (vector-add origin
                                 (vector-add edge1 edge2))))
        (let ((segment1 (make-segment vertex1 vertex4))
              (segment2 (make-segment vertex2 vertex3)))
          ((segments->painter (list segment1 segment2))
           frame))))))

(define diamond-painter
  (lambda (frame)
    (let ((origin (unit-square (frame-origin frame)))
          (edge1 (unit-square (frame-edge1 frame)))
          (edge2 (unit-square (frame-edge2 frame))))
      (let ((vertex1 origin)
            (vertex2 (vector-add origin edge1))
            (vertex3 (vector-add origin edge2))
            (vertex4 (vector-add origin
                                 (vector-add edge1 edge2))))
        (let ((segment1 (make-segment vertex1 vertex2))
              (segment2 (make-segment vertex1 vertex3))
              (segment3 (make-segment vertex2 vertex4))
              (segment4 (make-segment vertex3 vertex4)))
          (let ((midpoint1 (segment-midpoint segment1))
                (midpoint2 (segment-midpoint segment2))
                (midpoint3 (segment-midpoint segment3))
                (midpoint4 (segment-midpoint segment4)))
            (let ((side1 (make-segment midpoint1 midpoint2))
                  (side2 (make-segment midpoint1 midpoint3))
                  (side3 (make-segment midpoint2 midpoint4))
                  (side4 (make-segment midpoint3 midpoint4)))
              ((segments->painter (list side1 side2 side3 side4))
               frame))))))))

(define wave
  (lambda (frame)
    ((segments->painter (list (make-seg 0. 0. 0. 1.)
                              (make-seg 0. 0. 1. 0.)
                              (make-seg 0. 1. 1. 1.)
                              (make-seg 1. 0. 1. 1.)
                              (make-seg 0. .8 .15 .6)
                              (make-seg .15 .6 .3 .65)
                              (make-seg .3 .65 .4 .65)
                              (make-seg .4 .65 .35 .85)
                              (make-seg .35 .85 .4 1.)
                              (make-seg .6 1. .65 .85)
                              (make-seg .65 .85 .6 .65)
                              (make-seg .6 .65 .75 .65)
                              (make-seg .75 .65 1. .4)
                              (make-seg 1. .2 .6 .45)
                              (make-seg .6 .45 .75 0.)
                              (make-seg .6 0. .5 .3)
                              (make-seg .5 .3 .4 0.)
                              (make-seg .25 0. .35 .45)
                              (make-seg .35 .45 .25 .55)
                              (make-seg .25 .55 .15 .35)
                              (make-seg .15 .35 0. .6)))
     frame)))

(define (segment-midpoint segment)
  (two-points-midpoint (segment-start segment)
                       (segment-end segment)))
(define (two-points-midpoint p1 p2)
  (make-vect (average (vector-xcor p1)
                      (vector-xcor p2))
             (average (vector-ycor p1)
                      (vector-ycor p2))))

(define (average a b)
  (/ (+ a b) 2))

(define (make-seg a b c d)
  (make-segment (make-vect a b)
                (make-vect c d)))
